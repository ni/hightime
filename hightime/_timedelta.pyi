import datetime as std_datetime
from decimal import Decimal
from typing import ClassVar, overload

class timedelta(std_datetime.timedelta):
    min: ClassVar[timedelta]
    max: ClassVar[timedelta]
    resolution: ClassVar[timedelta]
    def __abs__(self) -> timedelta: ...
    def __add__(self, other: std_datetime.timedelta, /) -> timedelta: ...
    def __bool__(self) -> bool: ...
    def __divmod__(self, other: std_datetime.timedelta, /) -> tuple[int, timedelta]: ...
    def __eq__(self, other: object, /) -> bool: ...
    @overload
    def __floordiv__(self, other: std_datetime.timedelta, /) -> int: ...
    @overload
    def __floordiv__(self, other: int, /) -> timedelta: ...
    def __ge__(self, other: std_datetime.timedelta, /) -> bool: ...
    def __gt__(self, other: std_datetime.timedelta, /) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: std_datetime.timedelta, /) -> bool: ...
    def __lt__(self, other: std_datetime.timedelta, /) -> bool: ...
    def __mod__(self, other: std_datetime.timedelta, /) -> timedelta: ...
    def __mul__(self, other: float, /) -> timedelta: ...
    def __ne__(self, other: object, /) -> bool: ...
    def __neg__(self) -> timedelta: ...
    @staticmethod
    def __new__(
        cls,
        days: float = ...,
        seconds: float = ...,
        microseconds: float = ...,
        milliseconds: float = ...,
        minutes: float = ...,
        hours: float = ...,
        weeks: float = ...,
        nanoseconds: float = ...,
        picoseconds: float = ...,
        femtoseconds: float = ...,
        attoseconds: float = ...,
        zeptoseconds: float = ...,
        yoctoseconds: float = ...,
    ) -> timedelta: ...
    def __pos__(self) -> timedelta: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __sub__(self, other: std_datetime.timedelta, /) -> timedelta: ...
    @overload
    def __truediv__(self, other: std_datetime.timedelta, /) -> float: ...
    @overload
    def __truediv__(self, other: float, /) -> timedelta: ...
    @classmethod
    def _as_tuple(
        cls, td: std_datetime.timedelta, /
    ) -> tuple[int, int, int, int, int]: ...
    @classmethod
    def _as_ys(cls, td: std_datetime.timedelta, /) -> int: ...
    def _cmp(self, other: object, /) -> int: ...
    @property
    def femtoseconds(self) -> int: ...
    def precision_total_seconds(self) -> Decimal: ...
    def total_seconds(self) -> float: ...
    @property
    def yoctoseconds(self) -> int: ...
